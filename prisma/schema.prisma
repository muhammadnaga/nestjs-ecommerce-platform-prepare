// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User Management
model User {
    id            String   @id @default(cuid())
    email         String   @unique
    passwordHash  String
    role          UserRole @default(CUSTOMER)
    profile       Json?
    phone         String?
    emailVerified Boolean  @default(false)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    // Relations
    addresses     Address[]
    seller        Seller?
    carts         Cart[]
    orders        Order[]
    reviews       Review[]
    wishlists     Wishlist[]
    notifications Notification[]

    @@map("users")
}

enum UserRole {
    CUSTOMER
    SELLER
    ADMIN
    SUPER_ADMIN
}

model Seller {
    id             String       @id @default(cuid())
    userId         String       @unique
    businessName   String
    taxId          String       @unique
    commissionRate Decimal      @default(10.00) @db.Decimal(5, 2)
    status         SellerStatus @default(PENDING)
    documents      Json?
    bankDetails    Json?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    // Relations
    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    products Product[]

    @@map("sellers")
}

enum SellerStatus {
    PENDING
    APPROVED
    REJECTED
    SUSPENDED
}

model Address {
    id         String      @id @default(cuid())
    userId     String
    type       AddressType
    street     String
    city       String
    state      String
    country    String
    postalCode String
    isDefault  Boolean     @default(false)
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("addresses")
}

enum AddressType {
    BILLING
    SHIPPING
}

// Product Management
model Category {
    id          String   @id @default(cuid())
    name        String
    slug        String   @unique
    description String?
    parentId    String?
    image       String?
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
    children Category[] @relation("CategoryHierarchy")
    products Product[]

    @@map("categories")
}

model Product {
    id          String        @id @default(cuid())
    sellerId    String
    categoryId  String
    name        String
    slug        String        @unique
    description String?
    brand       String?
    sku         String        @unique
    status      ProductStatus @default(ACTIVE)
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt

    // Relations
    seller     Seller             @relation(fields: [sellerId], references: [id], onDelete: Cascade)
    category   Category           @relation(fields: [categoryId], references: [id])
    variants   ProductVariant[]
    images     ProductImage[]
    attributes ProductAttribute[]
    reviews    Review[]
    wishlists  Wishlist[]

    @@map("products")
}

enum ProductStatus {
    ACTIVE
    INACTIVE
    ARCHIVED
}

model ProductVariant {
    id           String   @id @default(cuid())
    productId    String
    name         String
    sku          String   @unique
    price        Decimal  @db.Decimal(12, 2)
    comparePrice Decimal? @db.Decimal(12, 2)
    costPrice    Decimal? @db.Decimal(12, 2)
    inventoryQty Int      @default(0)
    weight       Decimal? @db.Decimal(10, 3)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // Relations
    product    Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
    images     ProductImage[]
    cartItems  CartItem[]
    orderItems OrderItem[]
    wishlists  Wishlist[]

    @@map("product_variants")
}

model ProductImage {
    id        String   @id @default(cuid())
    productId String
    variantId String?
    url       String
    altText   String?
    position  Int      @default(0)
    isPrimary Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
    variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

    @@map("product_images")
}

model ProductAttribute {
    id        String   @id @default(cuid())
    productId String
    name      String
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@map("product_attributes")
}

// Order & Payment
model Cart {
    id         String   @id @default(cuid())
    userId     String
    couponCode String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    // Relations
    user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    items CartItem[]

    @@map("carts")
}

model CartItem {
    id            String   @id @default(cuid())
    cartId        String
    variantId     String
    quantity      Int
    priceSnapshot Decimal  @db.Decimal(12, 2)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    // Relations
    cart    Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
    variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

    @@unique([cartId, variantId])
    @@map("cart_items")
}

model Order {
    id            String        @id @default(cuid())
    userId        String
    orderNumber   String        @unique
    status        OrderStatus   @default(PENDING)
    total         Decimal       @db.Decimal(12, 2)
    tax           Decimal       @default(0) @db.Decimal(12, 2)
    shipping      Decimal       @default(0) @db.Decimal(12, 2)
    discount      Decimal       @default(0) @db.Decimal(12, 2)
    paymentStatus PaymentStatus @default(PENDING)
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt

    // Relations
    user     User        @relation(fields: [userId], references: [id])
    items    OrderItem[]
    payments Payment[]

    @@map("orders")
}

enum OrderStatus {
    PENDING
    CONFIRMED
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
    REFUNDED
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
    PARTIALLY_REFUNDED
}

model OrderItem {
    id        String   @id @default(cuid())
    orderId   String
    variantId String
    sellerId  String
    quantity  Int
    price     Decimal  @db.Decimal(12, 2)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
    variant ProductVariant @relation(fields: [variantId], references: [id])

    @@map("order_items")
}

model Payment {
    id              String        @id @default(cuid())
    orderId         String
    method          PaymentMethod
    amount          Decimal       @db.Decimal(12, 2)
    status          PaymentStatus @default(PENDING)
    transactionId   String?
    gatewayResponse Json?
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt

    // Relations
    order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    refunds Refund[]

    @@map("payments")
}

enum PaymentMethod {
    CREDIT_CARD
    DEBIT_CARD
    PAYPAL
    STRIPE
    BANK_TRANSFER
}

model Refund {
    id          String       @id @default(cuid())
    paymentId   String
    amount      Decimal      @db.Decimal(12, 2)
    reason      String
    status      RefundStatus @default(PENDING)
    processedAt DateTime?
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt

    // Relations
    payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

    @@map("refunds")
}

enum RefundStatus {
    PENDING
    APPROVED
    REJECTED
    PROCESSED
}

// Reviews & Marketing
model Review {
    id               String   @id @default(cuid())
    productId        String
    userId           String
    rating           Int      @db.SmallInt
    title            String
    content          String
    verifiedPurchase Boolean  @default(false)
    helpfulVotes     Int      @default(0)
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    // Relations
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([productId, userId])
    @@map("reviews")
}

model Wishlist {
    id        String   @id @default(cuid())
    userId    String
    productId String?
    variantId String?
    createdAt DateTime @default(now())

    // Relations
    user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    product Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
    variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

    @@unique([userId, productId])
    @@unique([userId, variantId])
    @@map("wishlists")
}

model Coupon {
    id        String     @id @default(cuid())
    code      String     @unique
    type      CouponType
    value     Decimal    @db.Decimal(12, 2)
    minAmount Decimal?   @db.Decimal(12, 2)
    maxUses   Int?
    usedCount Int        @default(0)
    expiresAt DateTime?
    isActive  Boolean    @default(true)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt

    @@map("coupons")
}

enum CouponType {
    PERCENTAGE
    FIXED_AMOUNT
}

model Notification {
    id         String           @id @default(cuid())
    userId     String
    type       NotificationType
    title      String
    message    String
    readStatus Boolean          @default(false)
    createdAt  DateTime         @default(now())

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("notifications")
}

enum NotificationType {
    ORDER_CONFIRMATION
    ORDER_SHIPPED
    ORDER_DELIVERED
    PAYMENT_SUCCESS
    PAYMENT_FAILED
    PRODUCT_BACK_IN_STOCK
    PRICE_DROP
    SELLER_APPLICATION
    GENERAL
}
